---
title: "Class 5: Data Viz with ggplot"
author: "Medhini Sosale (PID: A69034757)"
format: gfm
---

R has lots of ways to make figures and graphs in particular. 
One that comes with R out of the box is called **"base" R** - the `plot()` function.

```{r}
plot(cars)
```

A very popular package in this area is called **ggplot2**

Before I can use any add-on package like this I must install it with the `install.packages("ggplot2")` command/function.

Then to use the package I need to load it with a `library(ggplot2)` call.

```{r}
# install.packages('ggplot2')
library(ggplot2)

ggplot(cars) + 
  aes(x=speed, y=dist) + 
  geom_point()
```

For "simple" plots like this one base R code will be much shorter than ggplot code.

Let's fit a model and show it on my plot:

```{r}

ggplot(cars) + 
  aes(x=speed, y=dist) + 
  geom_point() + 
  geom_smooth()
```

Every ggplot has at least 3 layers

- **data** (data.frame with the numbers and stuff you want to plot)
- **aes**thetics (mapping of your data columns to your plot)
- **geom**s (theres are tons of these, basics are `geom_point()`, `geom_line()`, `geom_col()`)

```{r}
head(mtcars)
ggplot(mtcars) +
  aes(x=mpg, y=disp, size=hp, color=am) + 
  geom_point()
```

Now color all points blue

```{r}
library(ggrepel)

ggplot(mtcars) +
  aes(x=mpg, y=disp, col=am, label=rownames(mtcars)) + 
  geom_point(aes(size=hp)) +
  facet_wrap(~am) +
  geom_text_repel()
```


In-Class Lab
```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
nrow(genes)
colnames(genes)
ncol(genes)
table(genes$State) # using unique will tell you the names but not how many

# making a simple ggplot
p <- ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point()
p
# adding color
p + scale_colour_manual(values=c("blue","gray","red")) +
    labs(title="Gene Expression Changes Upon Drug Treatment",
         x="Control (no drug) ",
         y="Drug Treatment")


```

There are `r nrow(genes)` genes in this dataset.

The `table()` function is a super useful utility to determine how many entries of each type there are.

```{r}
round(table(genes$State) / nrow(genes), 3) # rounds to 3 decimal places
```


```{r}
# File location online

url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)

# basic scatter plot
library(ggplot2)
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point()

# making points a bit transparent
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha=0.5)

# adding aesthetic variables
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.5)

# changing aesthetics / what we color by
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, color = pop) +
  geom_point(alpha=0.8)

# changing point size
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, size = pop) +
  geom_point(alpha=0.5)

# scaling point size
ggplot(gapminder_2007) + 
  geom_point(aes(x = gdpPercap, y = lifeExp,
                 size = pop), alpha=0.5) + 
  scale_size_area(max_size = 10)

# adding 1957 data
gapminder_1957 <- gapminder %>% filter(year==1957 | year==2007)

ggplot(gapminder_1957) + 
  geom_point(aes(x = gdpPercap, y = lifeExp, color=continent,
                 size = pop), alpha=0.7) + 
  scale_size_area(max_size = 10) +
  facet_wrap(~year)

```

```{r}

gapminder_top5 <- gapminder %>% 
  filter(year==2007) %>% 
  arrange(desc(pop)) %>% 
  top_n(5, pop)

gapminder_top5

# basic bar chart
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop))

# adding color fill
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop, fill = continent))

# changing to a numeric variable for color
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop, fill = lifeExp))

# changing the fill again
ggplot(gapminder_top5) +
  aes(x=country, y=pop, fill=gdpPercap) +
  geom_col()

# change bar order
ggplot(gapminder_top5) +
  aes(x=reorder(country, -pop), y=pop, fill=gdpPercap) +
  geom_col()

# fill by country
ggplot(gapminder_top5) +
  aes(x=reorder(country, -pop), y=pop, fill=country) +
  geom_col(col="gray30") +
  guides(fill="none")

```

```{r}
head(USArrests)

USArrests$State <- rownames(USArrests)
ggplot(USArrests) +
  aes(x=reorder(State,Murder), y=Murder) +
  geom_col() +
  coord_flip()

ggplot(USArrests) +
  aes(x=reorder(State,Murder), y=Murder) +
  geom_point() +
  geom_segment(aes(x=State, 
                   xend=State, 
                   y=0, 
                   yend=Murder), color="blue") +
  coord_flip()

```
```{r}
library(patchwork)

# Setup some example plots 
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
p3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec))
p4 <- ggplot(mtcars) + geom_bar(aes(carb))

# Use patchwork to combine them here:
(p1 | p2 | p3) /
      p4
```


```{r}
ggplot(mtcars) +
  aes(mpg, disp) + 
  geom_point()

ggsave('myplot.pdf')
```

