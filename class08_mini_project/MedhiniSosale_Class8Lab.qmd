---
title: "Class 8: PCA Mini Project"
author: "Medhini Sosale (PID: A69034757)"
format: pdf
---

Side Note:

```{r}
head(mtcars)
```
Let's look at the mean value of every column:

```{r}
apply(mtcars, 2, mean) # margin is 1 for rows, 2 for columns
```

Let's look at "spread" via `sd()`

```{r}
apply(mtcars, 2, sd)
```

```{r}
apply(mtcars, 1, mean)
```

```{r}
pca <- prcomp(mtcars)
biplot(pca)
```

Let's try scaling the data:

```{r}
mtscale <- scale(mtcars)
head(mtscale)
```

What is the mean of each dimension/column in mtscale?

```{r}
round(apply(mtscale, 2, mean), 3)
round(apply(mtscale, 2, sd), 3)
```

Let's plot `mpg` vs `disp` for both mtcars and after the scaled data in `mtscale`

```{r}
library(ggplot2)
ggplot(mtcars, aes(mpg, disp)) +
  geom_point()
```

```{r}
ggplot(mtscale, aes(mpg, disp)) +
  geom_point()
```

```{r}
pca2 <- prcomp(mtscale)
biplot(pca2)
```

## Breast Cancer FNA data

```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
```

```{r}
#View(wisc.df)
# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]
diagnosis <- as.factor(wisc.df$diagnosis)
```

```{r}
# Question 1
nrow(wisc.df)

# Question 2
length(grep('M', diagnosis)) # alternatively you can do table(wisc.df$diagnosis)

# Question 3
length(grep(pattern = '_mean', colnames(wisc.data), value=T))
```

> Q1. How many observations are in this dataset?
There are 569 observations in this dataset.

> Q2. How many of the observations have a malignant diagnosis?
212 of the observations have a malignant diagnosis.

> Q3. How many variables/features in the data are suffixed with _mean?
There are 10 columns with the suffix _mean.

```{r}
# Check column means and standard deviations
colMeans(wisc.data)

apply(wisc.data,2,sd)

# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data, scale=TRUE)

# Look at summary of results
summary(wisc.pr)
```
> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?
The proportion of variance captured by PC1 is 0.4427, or 44.27%.

```{r}
x <- summary(wisc.pr)
x$importance
plot(x$importance[2,], typ='b')
```


> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?
Three principal components are required to describe at least 70% of the original variance.

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?
Seven principal components are required to describe at least 90% of the original variance.

```{r}
biplot(wisc.pr)
attributes(wisc.pr)
head(wisc.pr$x)
```
> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?
This plot is very messy and hard to interpret. All of the data sits on top of itself and I feel like there are way too many arrows to make it feasible to comprehend.

My main PC result figure
```{r}
# Scatter plot observations by components 1 and 2
plot(wisc.pr$x[,1], wisc.pr$x[,2], col = diagnosis, xlab = "PC1", ylab = "PC2")
```

```{r}
# Repeat for components 1 and 3
plot(wisc.pr$x[,1], wisc.pr$x[,3], col = diagnosis, xlab = "PC1", ylab = "PC3")
```
> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?
The points are pretty similarly clustered together but lower on the Y-axis.

```{r}
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(df) + 
  aes(PC1, PC2, col=diagnosis) + 
  geom_point()
```

```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

```{r}
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```

```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```

```{r}
## ggplot based graph
#install.packages("factoextra")
library(factoextra)
fviz_eig(wisc.pr, addlabels = TRUE)
```

```{r}
wisc.pr$rotation[,1]["concave.points_mean"]
```


> Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean? This tells us how much this original feature contributes to the first PC.
The component is approximately -0.261, which means that it contributes roughly 26.1% to the first PC.

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)
data.dist <- dist(data.scaled)
wisc.hclust <- hclust(data.dist, 'complete')
```


```{r}
plot(wisc.hclust)
abline(h=19, col="red", lty=2)

```

> Q10. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?
The model has 4 clusters at approximately height 19.

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, h=19)
table(wisc.hclust.clusters, diagnosis)

```

```{r}
wisc.hclust.clusters2 <- cutree(wisc.hclust, h=15)
table(wisc.hclust.clusters2, diagnosis)

```


> Q11. OPTIONAL: Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10? How do you judge the quality of your result in each case?
I tried a few numbers, and h=15 is shown above. I don't think it's any better because a better result to me would have less false positives/negatives in other clusters.

```{r}
wisc.hclust_wardD2 <- hclust(data.dist, 'ward.D2')
plot(wisc.hclust_wardD2)

wisc.hclust_single <- hclust(data.dist, 'single')
plot(wisc.hclust_single)

wisc.hclust_average <- hclust(data.dist, 'average')
plot(wisc.hclust_average)


```


> Q12. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.
My favorite method is ward.D2 because the result seems to be the neatest.

```{r}
wisc.pr.hclust <- hclust(data.dist, 'ward.D2')
grps <- cutree(wisc.pr.hclust, k=2)
table(grps)

table(grps, diagnosis)
```

```{r}
plot(wisc.pr$x[,1:2], col=grps)
plot(wisc.pr$x[,1:2], col=diagnosis)
```

```{r}
g <- as.factor(grps)
levels(g)
g <- relevel(g,2)
levels(g)

# Plot using our re-ordered factor 
plot(wisc.pr$x[,1:2], col=g)
```

```{r}
## Use the distance along the first 7 PCs for clustering i.e. wisc.pr$x[, 1:7]
wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:7]), method="ward.D2")
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=2)
table(wisc.pr.hclust.clusters, diagnosis)
```

```{r}
table(wisc.hclust.clusters, diagnosis)
```

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

```{r}
plot(wisc.pr$x[,1:2], col=g)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

> Q16. Which of these new patients should we prioritize for follow up based on your results?
We should prioritize patient 2 as their tumor is well within the malignant cluster, whereas patient 1 is within the benign cluster.